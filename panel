# 1. Fase de Construcción (Build Stage)
# Usamos una imagen Node.js más pequeña y segura
FROM node:20-alpine AS builder

# Establecemos el directorio de trabajo
WORKDIR /app

# Copiamos package.json y package-lock.json para instalar dependencias
COPY package.json package-lock.json ./

# --- INICIO DE CAMBIO CRÍTICO PARA BCrypt ---
# Instalamos herramientas de construcción (build-essentials) requeridas por la dependencia 'bcrypt'.
# Luego eliminamos el caché para mantener la imagen pequeña.
RUN apk add --no-cache python3 make g++ && \
    npm install --silent && \
    apk del python3 make g++
# --- FIN DE CAMBIO CRÍTICO PARA BCrypt ---

# Copiamos el resto del código
COPY . .

# Ejecutamos la generación de Prisma y el build de Next.js
RUN npx prisma generate && npm run build


# 2. Fase de Producción (Production Stage)
# Imagen base mínima para correr la aplicación
FROM node:20-alpine AS runner

WORKDIR /app

# Establece el puerto que la aplicación escuchará usando el formato moderno
ENV PORT=3000

# Next.js requiere la DATABASE_URL en runtime.

# Copiamos solo lo necesario desde la fase de construcción
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/node_modules/ ./node_modules/
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next ./.next

EXPOSE 3000
CMD ["npm", "start"]
