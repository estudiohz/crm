generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   // "superadmin", "partner", "cuenta"
  webhookSecret String? @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación: un partner tiene muchos cuentas
  partnerId String?
  partner   User?    @relation("PartnerCuentas", fields: [partnerId], references: [id])
  cuentas   User[]   @relation("PartnerCuentas")

  // Relación con Cuenta
  cuentasRecords Cuenta[] @relation("UserCuentas")

  // Relación con Factura
  facturas Factura[]

  // Relación con Empresa
  empresas Empresa[]

  // Relación con Contacto
  contactos Contacto[]

  // Relación con Formulario
  formularios Formulario[]

  // Relación con Etiqueta
  etiquetas Etiqueta[]
}

model Cuenta {
  id        Int      @id @default(autoincrement())
  cuenta    String
  nombre    String?
  apellidos String?
  empresa   String?
  email     String   @unique
  telefono  String?
  imagen    String?
  estado    String
  fechaAlta DateTime @default(now())
  nif       String?
  modulo    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación con User (partner)
  partnerId String?
  partner   User?    @relation("UserCuentas", fields: [partnerId], references: [id])

  // Relación con Partner
  partnerRecordId Int?
  partnerRecord   Partner? @relation(fields: [partnerRecordId], references: [id])
}

model Partner {
  id        Int      @id @default(autoincrement())
  partner   String
  empresa   String?
  email     String
  telefono  String?
  imagen    String?
  estado    String
  fechaAlta DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación con Cuentas
  cuentas Cuenta[]
}

model Contacto {
  id        Int      @id @default(autoincrement())
  nombre    String
  apellidos String?
  email     String
  telefono  String?
  empresa   String?
  estado    String
  fechaCreacion DateTime @default(now())
  origen    String?
  direccion String?
  localidad String?
  comunidad String?
  pais      String?
  cp        String?
  fechaCumpleanos DateTime?
  etiquetas  Json?   // Array of tags as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación con User
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  // Relación con Empresa
  empresaId Int?
  empresaRecord Empresa? @relation(fields: [empresaId], references: [id])

  // Relación con Factura
  facturas Factura[]
}

model Empresa {
  id        Int      @id @default(autoincrement())
  empresa   String
  cifNie    String?
  email     String
  telefono  String?
  estado    String
  fechaCreacion DateTime @default(now())
  direccion String?
  cp        String?
  comunidad String?
  pais      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación con User
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Relación con Contacto
  contactos Contacto[]
}

model Factura {
  id        Int      @id @default(autoincrement())
  serie     String
  numero    Int
  fecha     DateTime
  formaCobro String
  vencimiento DateTime
  estado    String   @default("pendiente")
  informacionFiscal String?
  total     Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  contactoId Int?
  contacto  Contacto? @relation(fields: [contactoId], references: [id])

  // Items
  items     FacturaItem[]
}

model FacturaItem {
  id          Int     @id @default(autoincrement())
  descripcion String
  cantidad    Float
  precio      Float
  descuento   Float   @default(0)
  iva         Float   @default(21)
  total       Float
  retencion   Float   @default(0)

  // Relación con Factura
  facturaId   Int
  factura     Factura @relation(fields: [facturaId], references: [id], onDelete: Cascade)
}

model Formulario {
  id        Int      @id @default(autoincrement())
  nombre    String
  url       String
  email     String
  estado    String
  etiquetas Json?    // Array of tags as JSON
  mappings  Json?    // Custom field mappings
  webhookUrl String? @unique
  webhookSecret String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Etiqueta {
  id          Int      @id @default(autoincrement())
  nombre      String
  color       String   // Hex color code
  descripcion String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}